

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Executability Conditions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Cannot move to a location if you are already there...
-occurs(move(R, L), I) :- holds(loc(R, L), I).

%% Cannot pick up an object if you are not in the same room...
-occurs(pickup(R, O), I) :- holds(loc(R, L1), I), holds(loc(O, L2), I), L1 != L2.
-occurs(pickup(R, O), I) :- holds(loc(R, L), I), -holds(loc(O, L), I).
-occurs(pickup(R, O), I) :- holds(loc(O, L), I), -holds(loc(R, L), I).

%% Cannot pick up an object if it already has that object (or another one) in hand.
-occurs(pickup(R, O2), I) :- holds(in_hand(R, O1), I).

%% Cannot put down an object unless it is in hand...
-occurs(putdown(R, O), I) :-  not holds(in_hand(R, O), I).

%% Cannot serve an object that is not in hand...
-occurs(serve(R, O, P), I) :- not holds(in_hand(R, O), I).

%% Cannot serve an object unless robot and human are in same location...
-occurs(serve(R, O, P), I) :- holds(loc(R, L1), I), holds(loc(P, L2), I), L1 != L2.

%% Rules to prevent incorrect serving...
-occurs(serve(R, O, P), I) :- holds(loc(R, L), I), -holds(loc(P, L), I).
-occurs(serve(R, O, P), I) :- holds(loc(P, L), I), -holds(loc(R, L), I).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% State Constraints
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Any thing exists in only one location...
-holds(loc(T, L2), I) :- holds(loc(T, L1), I), L1!=L2.

%% If a robot is holding an object, they have the same location...
holds(loc(O, L), I) :- holds(loc(R, L), I), holds(in_hand(R, O), I).

%% Only one entity can have an object in hand...
-holds(in_hand(E2, O), I) :- holds(in_hand(E1, O), I), E1 != E2.

%% Only one object can be held at any time...
-holds(in_hand(E, O2), I) :- holds(in_hand(E, O1), I), O1 != O2.

%% Attributes all have unique values...
-loc_type(L, T2) :- loc_type(L, T1), T1 != T2.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial axiom + CWA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% General inertia axioms...
holds(F,I+1) :- #inertial_fluent(F),
                holds(F,I),
                not -holds(F,I+1).

-holds(F,I+1) :- #inertial_fluent(F),
                 -holds(F,I),
                 not holds(F,I+1).
                 
%% CWA for actions...
-occurs(A,I) :- not occurs(A,I).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%       
%% Default and CR rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Books are usually in a library...
holds(loc(B, L), 0) :- #book(B), loc_type(L, library), 
		       not -holds(loc(B, L), 0).

%% Books are otherwise in an office...
holds(loc(B, LOff), 0) :- #book(B),
	loc_type(LLib, library),
	loc_type(LOff, office),
	-holds(loc(B, LLib), 0),
	not -holds(loc(B, LOff), 0).

is_defined(loc(B, L)) :- #book(B).

%% Under exceptional circumstances, assume books are elsewhere...
-holds(loc(B, L), 0) :+ #book(B), loc_type(L, library).
-holds(loc(B, LOff), 0) :+ #book(B), 
	  	 	   loc_type(LOff, office), 
			   loc_type(LLib, library), 
			   -holds(loc(B, LLib), 0).


occurs(A, I) :+ #learned_exoaction(A), I < numSteps.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%       
%% History and initial state rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Take what actually happened into account...
occurs(A,I) :- hpd(A,I).

%% Reality check axioms...
:- obs(F, true, I), -holds(F, I).
:- obs(F, false, I), holds(F, I).

is_defined(F) :- obs(F, Y, 0).
-holds(F, 0) :- #inertial_fluent(F),
		not is_defined(F), not holds(F, 0).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Planning Module...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Failure is not an option...
success :- goal(I).
:- not success. 

%% Cannot be idle while goal remains unachieved...
occurs(A, I) | -occurs(A, I) :- #agentaction(A), not goal(I). 

%% Cannot execute two agent actions at the same time...
:- occurs(A1,I), occurs(A2,I), #agentaction(A1), #agentaction(A2), A1 != A2.

something_happened(I) :- occurs(A, I). % Note this includes exoactions as well as agentactions, i.e., an exoaction can replace an agentaction where necessary.

:- not goal(I),
   not something_happened(I).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Initial State
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

